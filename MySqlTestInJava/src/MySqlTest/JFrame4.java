package MySqlTest;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * Interaction logic for JFrame4.
 */
public class JFrame4 extends javax.swing.JFrame
{
    //<editor-fold defaultstate="collapsed" desc="Fields">
    
    // The database connectionString.
    private String url = "jdbc:mysql://localhost:3306/MySqlTestDatabase";
    
    // The database username.
    String username = "root";
    
    // The database password.
    String password = "root";

    // The Id value.
    private int id;
    
    // The Relationship value.
    private int relationship;

    // The Person1 value.
    private int name1;

    // The Person2 value.
    private int name2;
    
    // </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Constructors">
    
    /**
     * Creates new form JFrame4.
     */
    public JFrame4()
    {
        initComponents();
    }
    
    // </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Methods">

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relations");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Person1", "Relationship", "Person2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setText("Person1:");

        jLabel5.setText("Relationship:");

        jLabel6.setText("Person2:");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jButton1.setText("List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Close");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText("Person1:");

        jLabel2.setText("Relationship:");

        jLabel3.setText("Person2:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, 146, Short.MAX_VALUE)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton5))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the ActionPerformed event of the jButton1 control.
     * @param evt The ActionEvent instance containing the event data.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // List
        GetData();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Handles the ActionPerformed event of the jButton2 control.
     * @param evt The ActionEvent instance containing the event data.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add
        try
        {
            // The fields must not be empty.
            if (name1 != 0 && relationship != 0 && name2 != 0 && name1 != name2)
            {
                id = 0;
                boolean matchFound = false;
                
                // Open a connection to the database.
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection(url, username, password);

                // Get the items from the Relations table.
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM MySqlTestDatabase.Relations");
            
                // Store the items in a Relation list.
                while (rs.next())
                {
                    id++;
                    
                    if (!matchFound && 
                            rs.getInt("Person1") == name1 && 
                            rs.getInt("Relationship") == relationship && 
                            rs.getInt("Person2") == name2 && 
                            rs.getBoolean("IsDeleted") == true)
                    {
                        matchFound = true;
                        id = rs.getInt("Id");
                    }
                }
            
                // Close the resultSet.
                rs.close();
                
                if (!matchFound)
                {
                    // Add new item to the Relations table.
                    PreparedStatement ps = conn.prepareStatement("INSERT INTO MySqlTestDatabase.Relations (Id, Person1, Relationship, Person2, IsDeleted) VALUES (?, ?, ?, ?, ?)");
                
                    // Set the values of the preparedStatement.
                    ps.setInt(1, id);
                    ps.setInt(2, name1);
                    ps.setInt(3, relationship);
                    ps.setInt(4, name2);
                    ps.setBoolean(5, false);
                
                    // Execute.
                    ps.execute();

                    // Close the preparedStatement.
                    ps.close();
                }
                else
                {
                    // Edit the IsDeleted value to false.
                    PreparedStatement ps = conn.prepareStatement("UPDATE MySqlTestDatabase.Relations SET IsDeleted = ? WHERE Id = ?");
                
                    // Set the values of the preparedStatement.
                    ps.setBoolean(1, false);
                    ps.setInt(2, id);
                
                    // Update the table.
                    ps.executeUpdate();

                    // Close the preparedStatement.
                    ps.close();
                }
                
                // Close the connection.
                conn.close();

                // Refresh.
                GetData();
            }
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Handles the ActionPerformed event of the jButton3 control.
     * @param evt The ActionEvent instance containing the event data.
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Edit
        try
        {
            // The fields must not be empty.
            if (name1 != 0 && relationship != 0 && name2 != 0 && name1 != name2)
            {
                // An item must be selected in the jTable.
                if (jTable1.getSelectedRow() >= 0)
                {
                    // Get the Id value of the selected item.
                    id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());

                    // Open a connection to the database.
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection(url, username, password);

                    // Edit the values.
                    PreparedStatement ps = conn.prepareStatement("UPDATE MySqlTestDatabase.Relations SET Person1 = ?, Relationship = ?, Person2 = ? WHERE Id = ?");
                
                    // Set the values of the preparedStatement.
                    ps.setInt(1, name1);
                    ps.setInt(2, relationship);
                    ps.setInt(3, name2);
                    ps.setInt(4, id);
                
                    // Update the table.
                    ps.executeUpdate();

                    // Close the preparedStatement and the connection.
                    ps.close();
                    conn.close();
                
                    // Refresh.
                    GetData();
                }
            }
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Handles the ActionPerformed event of the jButton4 control.
     * @param evt The ActionEvent instance containing the event data.
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Delete
        try
        {
            // An item must be selected in the jTable.
            if (jTable1.getSelectedRow() >= 0)
            {
                /* Logical Delete */
                // Get the Id value of the selected item.
                id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());

                // Open a connection to the database.
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection(url, username, password);

                // Edit the IsDeleted value to true.
                PreparedStatement ps = conn.prepareStatement("UPDATE MySqlTestDatabase.Relations SET IsDeleted = ? WHERE Id = ?");
                
                // Set the values of the preparedStatement.
                ps.setBoolean(1, true);
                ps.setInt(2, id);
                
                // Update the table.
                ps.executeUpdate();

                // Close the preparedStatement and the connection.
                ps.close();
                conn.close();
                
                // Refresh.
                GetData();
            }
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Handles the ActionPerformed event of the jButton5 control.
     * @param evt The ActionEvent instance containing the event data.
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Close
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * Handles the WindowOpened event of the form control.
     * @param evt The WindowEvent instance containing the event data.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Preset values.
        jLabel7.setText("");
        jLabel8.setText("");
        jLabel9.setText("");
        
        GetData();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Handles the ItemStateChanged event of the jComboBox1 control.
     * @param evt The ItemEvent instance containing the event data.
     */
    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        try
        {
            // Store the jComboBox SelectedItem.
            name1 = Integer.parseInt(jComboBox1.getSelectedItem().toString());
            
            // Open a connection to the database.
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, username, password);
            
            // Get the items from the People table.
            Person retVal = new Person();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM MySqlTestDatabase.People WHERE Id = ?");
            
            // Fill the values.
            ps.setInt(1, name1);
            
            // Execute.
            ResultSet rs = ps.executeQuery();
                
            // Store the items in a Relation object.
            while (rs.next())
            {
                retVal.setId(rs.getInt("Id"));
                retVal.setName(rs.getString("Name"));
                retVal.setMothername(rs.getString("Mothername"));
                retVal.setLocation(rs.getString("Location"));
                retVal.setBirthdate(rs.getDate("Birthdate"));
                retVal.setIsDeleted(rs.getBoolean("IsDeleted"));
            }
            
            // Give the helper jLabel the selected value.
            jLabel7.setText(retVal.getName());
            
            // Close the connection.
            rs.close();
            ps.close();
            conn.close();
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * Handles the MouseClicked event of the jTable1 control.
     * @param evt The MouseEvent instance containing the event data.
     */
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // An item must be selected in the jTable.
        if (jTable1.getSelectedRow() >= 0)
        {
            try
            {
                // Get the Id value of the selected item.
                id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
                
                // Open a connection to the database.
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection(url, username, password);
                
                // Get the items from the Relations table.
                Relation relation = new Relation();
                PreparedStatement ps = conn.prepareStatement("SELECT * FROM MySqlTestDatabase.Relations WHERE Id = ?");
                
                // Fill the values.
                ps.setInt(1, id);
                
                // Execute.
                ResultSet rs = ps.executeQuery();
                
                // Store the items in a Relation object.
                while (rs.next())
                {
                    relation.setId(rs.getInt("Id"));
                    relation.setPerson1(rs.getInt("Person1"));
                    relation.setRelationship(rs.getInt("Relationship"));
                    relation.setPerson2(rs.getInt("Person2"));
                    relation.setIsDeleted(rs.getBoolean("IsDeleted"));
                }
                
                // Give the jComboBox SelectedItems the selected values.
                jComboBox1.setSelectedItem(relation.getPerson1());
                jComboBox2.setSelectedItem(relation.getRelationship());
                jComboBox3.setSelectedItem(relation.getPerson2());
                
                // Close the connection.
                rs.close();
                ps.close();
                conn.close();
            }
            catch (Exception e)
            {
                // Empty the SelectedItems value.
                jComboBox1.setSelectedItem(null);
                jComboBox2.setSelectedItem(null);
                jComboBox3.setSelectedItem(null);
            }
        }
        else
        {
            // Empty the SelectedItems value.
            jComboBox1.setSelectedItem(null);
            jComboBox2.setSelectedItem(null);
            jComboBox3.setSelectedItem(null);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * Handles the ItemStateChanged event of the jComboBox2 control.
     * @param evt The ItemEvent instance containing the event data.
     */
    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        try
        {
            // Store the jComboBox SelectedItem.
            relationship = Integer.parseInt(jComboBox2.getSelectedItem().toString());
            
            // Open a connection to the database.
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, username, password);
            
            // Get the items from the People table.
            Relationship retVal = new Relationship();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM MySqlTestDatabase.Relationships WHERE Id = ?");
            
            // Fill the values.
            ps.setInt(1, relationship);
            
            // Execute.
            ResultSet rs = ps.executeQuery();
                
            // Store the items in a Relation object.
            while (rs.next())
            {
                retVal.setId(rs.getInt("Id"));
                retVal.setName(rs.getString("Name"));
                retVal.setIsDeleted(rs.getBoolean("IsDeleted"));
            }
            
            // Give the helper jLabel the selected value.
            jLabel8.setText(retVal.getName());
            
            // Close the connection.
            rs.close();
            ps.close();
            conn.close();
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    /**
     * Handles the ItemStateChanged event of the jComboBox3 control.
     * @param evt The ItemEvent instance containing the event data.
     */
    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        try
        {
            // Store the jComboBox SelectedItem.
            name2 = Integer.parseInt(jComboBox3.getSelectedItem().toString());
            
            // Open a connection to the database.
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, username, password);
            
            // Get the items from the People table.
            Person retVal = new Person();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM MySqlTestDatabase.People WHERE Id = ?");
            
            // Fill the values.
            ps.setInt(1, name2);
            
            // Execute.
            ResultSet rs = ps.executeQuery();
                
            // Store the items in a Relation object.
            while (rs.next())
            {
                retVal.setId(rs.getInt("Id"));
                retVal.setName(rs.getString("Name"));
                retVal.setMothername(rs.getString("Mothername"));
                retVal.setLocation(rs.getString("Location"));
                retVal.setBirthdate(rs.getDate("Birthdate"));
                retVal.setIsDeleted(rs.getBoolean("IsDeleted"));
            }
            
            // Give the helper jLabel the selected value.
            jLabel9.setText(retVal.getName());
            
            // Close the connection.
            rs.close();
            ps.close();
            conn.close();
        }
        catch (Exception e)
        {
            
        }
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    /**
     * Gets the data.
     */
    private void GetData()
    {
        try
        {
            // Clear the existing items.
            jComboBox1.removeAllItems();
            jComboBox2.removeAllItems();
            jComboBox3.removeAllItems();
            
            DefaultTableModel dm = (DefaultTableModel)jTable1.getModel();
            dm.getDataVector().removeAllElements();
            
            // Open a connection to the database.
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, username, password);
            
            // Get the items from the People table.
            ArrayList<Person> people = new ArrayList<>();
            Statement stmt1 = conn.createStatement();
            ResultSet rs1 = stmt1.executeQuery("SELECT * FROM MySqlTestDatabase.People");
            
            // Store the items in a Person list.
            while (rs1.next())
            {
                Person person = new Person();
                
                person.setId(rs1.getInt("Id"));
                person.setName(rs1.getString("Name"));
                person.setMothername(rs1.getString("Mothername"));
                person.setLocation(rs1.getString("Location"));
                person.setBirthdate(rs1.getDate("Birthdate"));
                person.setIsDeleted(rs1.getBoolean("IsDeleted"));
                
                people.add(person);
            }
            
            // Close the resultSet and the statement.
            rs1.close();
            stmt1.close();
            
            // Get the items from the Relationships table.
            ArrayList<Relationship> relationships = new ArrayList<>();
            Statement stmt2 = conn.createStatement();
            ResultSet rs2 = stmt2.executeQuery("SELECT * FROM MySqlTestDatabase.Relationships");
            
            // Store the items in a Relationship list.
            while (rs2.next())
            {
                Relationship relationship = new Relationship();
                
                relationship.setId(rs2.getInt("Id"));
                relationship.setName(rs2.getString("Name"));
                relationship.setIsDeleted(rs2.getBoolean("IsDeleted"));
                
                relationships.add(relationship);
            }
            
            // Close the resultSet and the statement.
            rs2.close();
            stmt2.close();
            
            // Get the items from the Relations table.
            ArrayList<Relation> relations = new ArrayList<>();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM MySqlTestDatabase.Relations WHERE IsDeleted = 0");
            
            // Store the items in a Relation list.
            while (rs.next())
            {
                Relation relation = new Relation();
                
                relation.setId(rs.getInt("Id"));
                relation.setPerson1(rs.getInt("Person1"));
                relation.setRelationship(rs.getInt("Relationship"));
                relation.setPerson2(rs.getInt("Person2"));
                relation.setIsDeleted(rs.getBoolean("IsDeleted"));
                
                relations.add(relation);
            }
            
            // Close the resultSet, the statement and the connection.
            rs.close();
            stmt.close();
            conn.close();
            
            // Fill the jTable rows with the values of the Relations table.
            for (int i = 0; i < relations.size(); i++)
            {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                String person1Name = "";
                String person2Name = "";
                String relationshipType = "";
                
                // Substitute the Person1 and Person2 ids with their names.
                for (int j = 0; j < people.size(); j++)
                {
                    if (relations.get(i).getPerson1() == people.get(j).getId())
                    {
                        person1Name = people.get(j).getName();
                    }
                    
                    if (relations.get(i).getPerson2() == people.get(j).getId())
                    {
                        person2Name = people.get(j).getName();
                    }
                }
                
                // Substitute the Relationship ids with their names.
                for (int j = 0; j < relationships.size(); j++)
                {
                    if (relations.get(i).getRelationship() == relationships.get(j).getId())
                    {
                        relationshipType = relationships.get(j).getName();
                    }
                }
                
                model.addRow(new Object[]
                {
                    relations.get(i).getId(),
                    person1Name,
                    relationshipType,
                    person2Name
                });
            }
            
            // Fill the jComboBox items with the values of the People table.
            for (int j = 0; j < people.size(); j++)
            {
                if (people.get(j).getIsDeleted() == false)
                {
                    jComboBox1.addItem(people.get(j).getId());
                    jComboBox3.addItem(people.get(j).getId());
                }
            }
                            
            // Fill the jComboBox items with the values of the Relationships table.
            for (int j = 0; j < relationships.size(); j++)
            {
                if (relationships.get(j).getIsDeleted() == false)
                {
                    jComboBox2.addItem(relationships.get(j).getId());
                }
            }
            
            // Set the default selected items in the jComboBoxes.
            jComboBox1.setSelectedItem(null);
            jComboBox2.setSelectedItem(null);
            jComboBox3.setSelectedItem(null);
        }
        catch (Exception e)
        {
            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(JFrame4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(JFrame4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(JFrame4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(JFrame4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new JFrame4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    // </editor-fold>
}
